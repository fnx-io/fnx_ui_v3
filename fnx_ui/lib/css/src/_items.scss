@use 'vars';
@use 'effects';
@use 'colors';
@use 'icons';

@mixin render() {
  // All these are "items"
  .item, .btn, .btn-flat,.icon, .char, .item-row > *, .item-column > *, button, .item-input {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    display: inline-block;
    position: relative;
    padding: vars.$smallSize_withoutBorder vars.$smallSize_withoutBorder;
    min-height: vars.$bigSize;
    border: vars.$borderSize solid transparent;
    border-radius: vars.$borderRadius;
    text-decoration: none !important;
    color: inherit;
    line-height: calc(var(--rem) * var(--lh));
    max-width: 100%;
    &:focus-within, &:focus {
      @include effects.focusOutline();
    }
    &:focus-within *:focus {
      outline: none !important;
    }
    & a {
      text-decoration: none;
      color: inherit;
    }
    &[data-prefix] {
      padding-left: vars.$bigSize !important;
      &:before {
        position: absolute;
        @include icons.mdIcon();
        top: 0;
        left: 0;
        text-align: center;
        line-height: vars.$bigSize;
        width: vars.$bigSize;
        height: vars.$bigSize;
        content: attr(data-prefix);
      }
    }
    &[data-suffix] {
      padding-right: vars.$bigSize !important;
      &:after {
        position: absolute;
        @include icons.mdIcon();
        top: 0;
        right: 0;
        text-align: center;
        line-height: vars.$bigSize;
        width: vars.$bigSize;
        height: vars.$bigSize;
        content: attr(data-suffix);
        //@include renderCharRules();
      }
    }
  }
  .item-input {
    border: vars.$border;
    border-radius: vars.$borderRadius;
    box-shadow: inset 1px 2px 2px rgba(0,0,0,.1); // see effects.debossed
    display: inline-flex;
    flex-wrap: nowrap;
    max-width: 100%;
    min-width: 1em;
    & > .spacer {
      flex-basis: 1px;
      width: 1px;
    }
    & [prefix] {
      padding-right: vars.$smallSize;
    }
    & [suffix] {
      padding-left: vars.$smallSize;
    }
  }
  .item-row a:hover {
    text-decoration: underline;
  }
  // perfect item square
  .char, .icon {
    text-align: center;
    width: vars.$bigSize;
    max-height: vars.$bigSize;
    max-width: vars.$bigSize;
  }
  // material design icon in perfect square
  .icon {
    @include icons.mdIcon();
    line-height: vars.$bigSize_withoutBorder !important;
    padding: 0 !important;
    vertical-align: middle;
  }
  .btn, .btn-flat, button {
    border-radius: vars.$borderRadius;
    cursor: pointer;
    background-color: white;
  }
  .btn, button:not(.btn-flat) {
    border-color: #{vars.$borderColor};
    @include effects.renderShadow(vars.$shadowSize*0.5);
    &:hover {
      @include effects.renderShadow(vars.$shadowSize);
    }
    &:active {
      box-shadow: none !important;
    }
  }
  .btn-flat {
    &:hover {
      border-color: #{vars.$borderColor};
      @include effects.renderShadow(vars.$shadowSize);
    }
    &:active {
      border-color: #{vars.$borderColor};
      box-shadow: none !important;
    }
  }
  .component-error {
    border-color: vars.$errorColor;
  }
}
@mixin renderWithPrefix($prefix) {
  .#{$prefix}item-row {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    width:100%;
    margin-bottom: 0;
    & > * {
      flex-grow: 0;
      flex-shrink: 0;
      max-height: vars.$bigSize;
      margin-bottom: 0;
    }
    & h1, & h2 {
      padding-top: 0;
      padding-bottom: 0;
      line-height: vars.$bigSize;
    }
  }
  .#{$prefix}item-column {
    display: block;
    & > * {
      //display: block; // kdyz to tu je, nefunguje Text
      width: 100%;
      border-radius: 0;
    }
  }
  ul.#{$prefix}item-column {
    padding-left: 0;
  }
}

/*

.renderItemIcons() {

}

.renderItem() {
  position: relative;
  margin: 0;
  padding: @basicWidgetPadding @padding;
  min-height: @basicWidgetSize;
& > a {
  &:only-child {
    .renderItemIcons();
    margin: -@basicWidgetPadding -@padding;
    padding: @basicWidgetPadding @padding;
    display: block;
  }
}
}
.item {
  .renderItem();
}
.item--border {
  margin: 0;
  padding: @borderedWidgetPadding;
  border: @borderSize solid @colorBorderDefault;
  border-radius: @borderRadius;
}
.char {
  display: inline-block;
  width: @basicWidgetSize;
  line-height: @basicWidgetSize;
  text-align: center;
}

.item, .item--border {
  .renderItemIcons();
}
 */